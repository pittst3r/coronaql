/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */

import * as ctx from "../../context"
import { core, connectionPluginCore } from "@nexus/schema"

declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    connectionField<FieldName extends string>(
            fieldName: FieldName, 
            config: connectionPluginCore.ConnectionFieldConfig<TypeName, FieldName> 
          ): void
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  LocaleKind: "COUNTRY" | "COUNTY" | "STATE"
}

export interface NexusGenRootTypes {
  Locale: { // root type
    id: string; // ID!
    kind: NexusGenEnums['LocaleKind']; // LocaleKind!
    name: string; // String!
    subdivisions: NexusGenRootTypes['Locale'][]; // [Locale!]!
  }
  PageInfo: { // root type
    endCursor?: string | null; // String
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    startCursor?: string | null; // String
  }
  Query: {};
  Record: { // root type
    cases: number; // Int!
    date: any; // Day!
    deaths: number; // Int!
    id: string; // ID!
  }
  RecordConnection: { // root type
    edges?: Array<NexusGenRootTypes['RecordEdge'] | null> | null; // [RecordEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  RecordEdge: { // root type
    cursor: string; // String!
    node: NexusGenRootTypes['Record']; // Record!
  }
  Node: NexusGenRootTypes['Locale'] | NexusGenRootTypes['Record'];
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  Day: any;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  LocaleKind: NexusGenEnums['LocaleKind'];
}

export interface NexusGenFieldTypes {
  Locale: { // field return type
    id: string; // ID!
    kind: NexusGenEnums['LocaleKind']; // LocaleKind!
    name: string; // String!
    records: NexusGenRootTypes['RecordConnection']; // RecordConnection!
    subdivisions: NexusGenRootTypes['Locale'][]; // [Locale!]!
  }
  PageInfo: { // field return type
    endCursor: string | null; // String
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    startCursor: string | null; // String
  }
  Query: { // field return type
    locales: NexusGenRootTypes['Locale'][] | null; // [Locale!]
  }
  Record: { // field return type
    cases: number; // Int!
    date: any; // Day!
    deaths: number; // Int!
    id: string; // ID!
  }
  RecordConnection: { // field return type
    edges: Array<NexusGenRootTypes['RecordEdge'] | null> | null; // [RecordEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  RecordEdge: { // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['Record']; // Record!
  }
  Node: { // field return type
    id: string; // ID!
  }
}

export interface NexusGenArgTypes {
  Locale: {
    records: { // args
      after?: string | null; // String
      before?: string | null; // String
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
  Query: {
    locales: { // args
      name?: string | null; // String
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
  Node: "Locale" | "Record"
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Locale" | "PageInfo" | "Query" | "Record" | "RecordConnection" | "RecordEdge";

export type NexusGenInputNames = never;

export type NexusGenEnumNames = "LocaleKind";

export type NexusGenInterfaceNames = "Node";

export type NexusGenScalarNames = "Boolean" | "Day" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: ctx.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    
  }
  interface NexusGenPluginSchemaConfig {
  }
}